<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="Operation_v1_0.ttinclude" #>
<#   
	// TransformGenerator<OperationAbstractionType>(GenerateRoot, ".designer.cs");	
	GenerateOperationAbstraction(CurrentAbstraction);
#>
<#+ 

	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			OperationAbstractionType abs = LoadXml<OperationAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			this.GenerationEnvironment.Clear();
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + ".designer.cs";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}

	
	void GenerateRoot()
	{
		//GenerateOperationAbstraction(CurrentAbstraction);
	}
	
	
	OperationAbstractionType CurrentAbstraction;
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = (OperationAbstractionType) abs;
	}
	
	void GenerateOperationAbstraction(OperationAbstractionType abstraction)
	{
		#>
using System;
using System.Collections.Specialized;
using System.Drawing;
using System.IO;

		<#+
		foreach(OperationsType operations in abstraction.Operations) {
			BeginNamespace(operations.codeNamespace);
			foreach(var operation in operations.Operation)
				GenerateOperation(operation);
			EndBlock();
		}
	}

	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	OperationType CurrOperation;
	
	void GenerateOperation(OperationType operation)
	{
		CurrOperation = operation;
		string operationName = operation.name;
		string parameterClassName = operationName + "Parameters";
		string returnValueClassName = GetReturnValueClassName(operationName);
		if(operation.Parameters != null)
			GenerateVariableClassDefinition(parameterClassName, operation.Parameters.Parameter);
		#>

		public class <#= operationName #> 
		{
		<#+

		GenerateParameterPreparation(parameterClassName, operation.Parameters);
		GenerateInternalReturnValueClasses(operation.Execution.SequentialExecution);
		GenerateExecution(operation);
		#>
		}
		<#+
		if(operation.OperationReturnValues != null)
			GenerateVariableClassDefinition(returnValueClassName, operation.OperationReturnValues.ReturnValue);

	}

	void GenerateReturnValue(OperationReturnValuesType returnValues)
	{
		if(returnValues == null)
			return;
		string allParameters = GetParametersAndTargetsAsAllParams("parameters.",
			returnValues.Parameter, returnValues.Target);
		string returnValueClassName = GetReturnValueClassName(CurrOperation.name);
		string execName = GetPrefixedMethodName("Get_ReturnValue");
		#>
		<#= returnValueClassName #> returnValue = <#= execName #>(<#= allParameters #>);
		return returnValue;
		<#+
	}
	
	void GenerateInternalReturnValueClasses(object[] executionItems)
	{
		foreach(object executionItem in executionItems)
			GenerateReturnValueClassDefinition(executionItem);
	}
	
	void GenerateReturnValueClassDefinition(object executionItem)
	{
		OperationExecuteType operationExec = executionItem as OperationExecuteType;
		MethodExecuteType methodExec = executionItem as MethodExecuteType;
		TargetDefinitionType targetDef = executionItem as TargetDefinitionType;
		if(operationExec != null) {
			GenerateReturnValueClassDefinition(operationExec.name, operationExec.ReturnValue, false);
		}
		else if(methodExec != null)
			GenerateReturnValueClassDefinition(methodExec.name, methodExec.ReturnValue, false);
		else if(targetDef != null) {
		} else
			throw new NotSupportedException("Execution item type: " + executionItem.GetType().Name);
	}
	
	
	string[] GetParameterArray(string prefix, TargetType[] targets)
	{
		if(targets == null)
			return new string[0];
		string[] result = targets.Select(target => prefix + target.name).ToArray();
		return result;
	}
	
	string GetParametersAndTargetsAsAllParams(string paramPrefix, TargetType[] parameters,
		TargetType[] targets)
	{
		string[] parameterParameters = GetParameterArray(paramPrefix, parameters);
		string[] targetParameters = GetParameterArray("", targets);
		string allParameters = String.Join(", ", parameterParameters.Union(targetParameters).ToArray());
		return allParameters;
	}
	
	bool HasReturnValue(OperationType operation)
	{
		return operation.OperationReturnValues != null;
	}
	
	bool HasParameters(OperationType operation)
	{
		return operation.Parameters != null;
	}
	
	string GetReturnValueType(string returnValueOwner, VariableType[] returnValues, bool isOperation)
	{
		if(returnValues == null)
			return "void";
		if(returnValues.Length == 1 && isOperation == false)
			return returnValues[0].dataType;
		return GetReturnValueClassName(returnValueOwner);
	}
	
	string GetReturnValueClassName(string returnValueOwner)
	{
		return returnValueOwner + "ReturnValue";
	}
	
	string GetExecutionOutputName(string returnValueOwner)
	{
		return returnValueOwner + "Output";
	}
	
	void GenerateReturnValueClassDefinition(string returnValueOwner, VariableType[] returnValues, bool isOperation)
	{
		if(returnValues == null || (returnValues.Length < 2 && isOperation == false))
			return;
		string returnValueClassName = GetReturnValueClassName(returnValueOwner);
		GenerateVariableClassDefinition(returnValueClassName, returnValues);
	}
	
	string GetPrefixedMethodName(string methodName)
	{
		string implementationClassMethodName = CurrOperation.name + "Implementation." + methodName;
		return implementationClassMethodName;
	}
	
	void GenerateOperationExecuteItem(OperationExecuteType operationExec)
	{
		string allParameters = GetParametersAndTargetsAsAllParams("parameters.",
			operationExec.Parameter, operationExec.Target);
		string returnValueType = GetReturnValueType(operationExec.name, operationExec.ReturnValue, false);
		string executionOutputName = GetExecutionOutputName(operationExec.name);
		string returnValueDefinitionString = operationExec.ReturnValue != null ?
			returnValueType + " " + executionOutputName + ";" : "";
		string targetOperationName = operationExec.targetOperationName;
		OperationType targetOperation = GetOperation(targetOperationName);
		string targetOperationParametersName = targetOperation.name + "Parameters";
		string targetOperationParameterCall = "";
		string targetOperationReturnValueAssignment = "";
		string getOutputParameters = "";
		if(HasReturnValue(targetOperation))
		{
			targetOperationReturnValueAssignment = "var operationReturnValue = ";
			string[] outputParameterArray = allParameters.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Select(str => str.Trim()).ToArray();
			outputParameterArray = (new string[] { "operationReturnValue" }).Union(outputParameterArray).ToArray();
			getOutputParameters = String.Join(", ", outputParameterArray);
		} else
		{
			getOutputParameters = allParameters;
		}
		string operationCallParameters = "";
		string execName = GetPrefixedMethodName(operationExec.name);
		if(HasParameters(targetOperation))
		{
			targetOperationParameterCall = targetOperationParametersName + 
				" operationParameters = " + execName + "_GetParameters(" + allParameters + ");";
			operationCallParameters = "operationParameters";
		} 
		string returnValueAssignmentString = operationExec.ReturnValue != null ? 
			executionOutputName + " = " + execName + "_GetOutput(" + getOutputParameters + ");" : "";
		#>
		<#= returnValueDefinitionString #>
		{ // Local block to allow local naming
			<#= targetOperationParameterCall #>
			<#= targetOperationReturnValueAssignment #><#= targetOperationName #>.Execute(<#= operationCallParameters #>);
			<#= returnValueAssignmentString #>						
		} // Local block closing
		<#+

	}
	
	void GenerateMethodExecuteItem(MethodExecuteType methodExec)
	{
		string allParameters = GetParametersAndTargetsAsAllParams("parameters.",
			methodExec.Parameter, methodExec.Target);
		string returnValueType = GetReturnValueType(methodExec.name, methodExec.ReturnValue, false);
		string executionOutputName = GetExecutionOutputName(methodExec.name);
		string returnValueOutputString = methodExec.ReturnValue != null ? 
			returnValueType + " " + executionOutputName + " = " : "";
		string execName = GetPrefixedMethodName("ExecuteMethod_" + methodExec.name);
		#>
		<#= returnValueOutputString #><#= execName #>(<#= allParameters #>);		
		<#+
	}
	
	void GenerateTargetDefinitionItem(TargetDefinitionType targetDef)
	{
		string allParameters = GetParametersAndTargetsAsAllParams("parameters.",
			targetDef.Parameter, targetDef.Target);
		string execName = GetPrefixedMethodName("GetTarget_" + targetDef.name);
		#>
		<#= targetDef.dataType #> <#= targetDef.name #> = <#= execName #>(<#= allParameters #>);	
		<#+
	}
	
	void GenerateExecutionItem(object executionItem)
	{
		OperationExecuteType operationExec = executionItem as OperationExecuteType;
		MethodExecuteType methodExec = executionItem as MethodExecuteType;
		TargetDefinitionType targetDef = executionItem as TargetDefinitionType;
		if(operationExec != null)
			GenerateOperationExecuteItem(operationExec);
		else if(methodExec != null)
			GenerateMethodExecuteItem(methodExec);
		else if(targetDef != null)
			GenerateTargetDefinitionItem(targetDef);
		else
			throw new NotSupportedException("Execution item type: " + executionItem.GetType().Name);
	}
	
	void GenerateExecution(OperationType operation)
	{
		string operationName = operation.name;
		string parametersCallingString = operation.Parameters != null ?  operationName + "Parameters parameters" : "";
		string resultsTypeNameString = operation.OperationReturnValues != null ? operationName + "ReturnValue" : "void";
		string parameterPreparationCallString = operation.Parameters != null ? "PrepareParameters(parameters);" : ""; 
		#>
		public static <#= resultsTypeNameString #> Execute(<#= parametersCallingString #>)
		{
			<#+ GeneratePerformanceRequirementInitialization(GetPerformanceRequirements(operation)); #>
			<#= parameterPreparationCallString #>
			<#+
			foreach(object executionItem in operation.Execution.SequentialExecution)
			{
				GenerateExecutionItem(executionItem);
			}
			GeneratePerformanceRequirementAssertion(GetPerformanceRequirements(operation));
			GenerateReturnValue(operation.OperationReturnValues);
			#>
		}
		<#+
	}

	RequirementType[] GetPerformanceRequirements(OperationType operation)
	{
		if(operation.OperationSpec == null || operation.OperationSpec.Requirements == null)
			return null;
		RequirementType[] performanceRequirements = operation.OperationSpec.Requirements.Where(req => req.Item is RequirementTypePerformance).ToArray();
		RequirementType invalidCheck = performanceRequirements.FirstOrDefault(req => req.category != RequirementTypeCategory.Performance);
		if(invalidCheck != null)
			throw new ArgumentException("Performance requirement in wrong category: " + invalidCheck.name + " category " + invalidCheck.category.ToString());
		return performanceRequirements;
	}
	
	void GeneratePerformanceRequirementInitialization(RequirementType[] performanceReqs)
	{
		if(performanceReqs == null)
			return;
		foreach(RequirementType req in performanceReqs)
			GeneratePerfReqInit(req.name, req.Item as RequirementTypePerformance);
	}
	
	void GeneratePerfReqInit(string reqName, RequirementTypePerformance perfReq)
	{
		if(perfReq.maxCPUTimeMsSpecified || perfReq.maxFileIOBytesSpecified || perfReq.maxFileIOCountSpecified || perfReq.maxFileIOTimeMsSpecified 
			|| perfReq.maxMemoryBytesSpecified)
			throw new NotSupportedException("Only TotalMSTime is supported as performance requirement for now");
		if(perfReq.maxTotalTimeMsSpecified) 
		{
		#>
	        DateTime perfMonitorTotalTimeMs_<#= reqName #>_Start = DateTime.Now;
		<#+
		}
	}
	
	void GeneratePerfReqAssert(string reqName, RequirementTypePerformance perfReq)
	{
		if(perfReq.maxCPUTimeMsSpecified || perfReq.maxFileIOBytesSpecified || perfReq.maxFileIOCountSpecified || perfReq.maxFileIOTimeMsSpecified 
			|| perfReq.maxMemoryBytesSpecified)
			throw new NotSupportedException("Only TotalMSTime is supported as performance requirement for now");
		if(perfReq.maxTotalTimeMsSpecified) 
		{
		#>
			// TODO: Add diagnostic message in addition to brute exception (at least as an option)
			TimeSpan TotalTimeMs_<#= reqName #>_duration = DateTime.Now - perfMonitorTotalTimeMs_<#= reqName #>_Start;
            if(TotalTimeMs_<#= reqName #>_duration.TotalMilliseconds > <#= perfReq.maxTotalTimeMs #>)
            {
                throw new TimeoutException(String.Format("Performance not withing requirement: <#= reqName #> requires <#= perfReq.maxTotalTimeMs #> ms, it took {0} ms", TotalTimeMs_<#= reqName #>_duration.TotalMilliseconds));
            }
		<#+
		}
	}
	
	void GeneratePerformanceRequirementAssertion(RequirementType[] performanceReqs)
	{
		if(performanceReqs == null)
			return;
		foreach(RequirementType req in performanceReqs)
			GeneratePerfReqAssert(req.name, req.Item as RequirementTypePerformance);
	}
	
	string GetCallingTargetsParameterString(TargetType[] targets, string emptyParameterResult,
		string prefixText = "")
	{
		if(targets == null || targets.Length == 0)
			return emptyParameterResult;
		string[] targetNames = targets.Select(target => prefixText + target.name).ToArray();
		return String.Join(", ", targetNames);
	}
	
	void GenerateValidationItem(ValidationType validationItem)
	{
		string validationMethodName = "ParameterValidation_" + validationItem.name + "_ThrowsException";
		validationMethodName = GetPrefixedMethodName(validationMethodName);
		string callingParametersString = GetCallingTargetsParameterString(validationItem.Target, "parameters", "parameters.");
		#>
		<#= validationMethodName #>(<#= callingParametersString #>);
		<#+
	}
	
	OperationType GetOperation(string operationName, bool requireExisting = true)
	{
		OperationType operation =
			CurrentAbstraction.Operations.SelectMany(opers => opers.Operation).FirstOrDefault(item => item.name == operationName);
		if(requireExisting && operation == null)
			throw new ArgumentException("Operation not found with requested name: " + operationName, "operationName");
		return operation;
	}
	
	VariableType[] GetReturnValues(string operationName)
	{
		OperationType operation = GetOperation(operationName);
		if(operation.OperationReturnValues == null)
			return null;
		return operation.OperationReturnValues.ReturnValue;
	}
	
	void GenerateModificationItem(ModificationType modificationItem)
	{
		string modificationMethodName = "ParameterModification_" + modificationItem.name;
		modificationMethodName = GetPrefixedMethodName(modificationMethodName);
		string callingParametersString = GetCallingTargetsParameterString(modificationItem.Target, "parameters", "ref parameters.");
		#>
		<#= modificationMethodName #>(<#= callingParametersString #>);
		<#+
		
	}

	void GeneratePreparingItem(object preparingItem)
	{
		if(preparingItem == null)
			throw new ArgumentNullException("preparingItem");
		ValidationType validationItem = preparingItem as ValidationType;
		ModificationType modificationItem = preparingItem as ModificationType;
		if(validationItem != null)
			GenerateValidationItem(validationItem);
		else if(modificationItem != null)
			GenerateModificationItem(modificationItem);
		else 
			throw new NotSupportedException("Preparing item type: " + preparingItem.GetType().Name);
	}
	
	void GenerateParameterPreparation(string parameterClassName, ParametersType parameters)
	{
		if(parameters == null)
			return;
		#>
		private static void PrepareParameters(<#= parameterClassName #> parameters)
		{
			<#+
			foreach(object preparingItem in parameters.Items ?? new object[0])
				GeneratePreparingItem(preparingItem);
			#>
		}
		<#+
	}
	
	void GenerateVariableDefinition(VariableType variableDef, string accessModifier, string initialAssignment)
	{
		GenerateVariableDefinition(variableDef.dataType, variableDef.name, accessModifier, initialAssignment);
	}
	
	void GenerateVariableDefinition(string dataType, string name, string accessModifier, string initialAssignment)
	{
		if(dataType == null)
			throw new ArgumentNullException("dataType");
		if(name == null)
			throw new ArgumentNullException("name");
		string accessString = accessModifier ?? "";
		string initialAssignmentString = initialAssignment != null ? " = " + initialAssignment : "";
		#>
		<#= accessString #> <#= dataType #> <#= name #> <#= initialAssignmentString #>;
		<#+
	}
	
	void GenerateVariableClassDefinition(string className, VariableType[] variables)
	{
		if(className == null)
			throw new ArgumentNullException("className");
		if(variables == null)
			throw new ArgumentNullException("variables");
		#>
		public class <#= className #> 
		{
		<#+
		foreach(var variable in variables)
			GenerateVariableDefinition(variable, "public", null);
		#>
		}
		<#+
	}
	
	void GenerateParameterDefinition(string operationName, ParametersType parameters)
	{
		if(parameters == null || parameters.Parameter == null || parameters.Parameter.Length == 0)
			return;
		string parameterClassName = operationName + "Parameters";
		GenerateVariableClassDefinition(parameterClassName, parameters.Parameter);
	}
	
	#endregion
#>