<#@ template debug="true" hostSpecific="true" language="C#v3.5" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="Operation_v1_0_namespace.ttinclude" #>

<html>

<#   
	string templateDirectoryName = Path.GetDirectoryName(Host.TemplateFile);
	string directoryName = templateDirectoryName + @"\Content_v1_0";
	directoryName = directoryName.Replace("OperationABS", "AbstractionContent");
	string[] xmlFileNames = Directory.GetFiles(directoryName, "*.xml");
	
	GenerateHeadWithStyle();
	GenerateBodyStart();

	foreach(string xmlFileName in xmlFileNames)
	{
		Operation_v1_0.OperationAbstractionType abstraction = LoadXml<Operation_v1_0.OperationAbstractionType>(xmlFileName);
		GenerateBody(abstraction);
		//Operation_v1_0.OperationsType operations = abstraction.Operations;
		//BeginNamespace(operations.codeNamespace);
		//foreach(var operation in operations.Operation)
		//	GenerateOperation(operation);
		//EndBlock();
		//PowerPointAddIn_v1_0.PowerPointAddInAbstraction abstraction = LoadXml<PowerPointAddIn_v1_0.PowerPointAddInAbstraction>(xmlFileName);
		//GenerateAddInBase(abstraction);
	}
	GenerateBodyEnd();

#>

</html>
<#+ 
	void GenerateBody(Operation_v1_0.OperationAbstractionType abstraction)
	{
		GenerateTitle(abstraction);
		GenerateTOC(abstraction);
		foreach(var operation in abstraction.Operations.Operation)
		{
			CurrOperation = operation;
			GenerateOperation(operation);
		}
	}

	void GenerateTitle(object obj)
	{
		#>
<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0cm 0cm 4.0pt 0cm'>
<p class=MsoTitle>Operations Documentation</p>
</div>
<h1><span lang=EN-US>About</span></h1>
<p class=MsoNormal>Auto-generated design documentation for operations.</p>
		
		<#+
	}
	
	void GenerateTOC(Operation_v1_0.OperationAbstractionType abstraction)
	{
		// TODO: Create TOC with references to names
		#>
		<p>... Manually insert TOC in Word here ...</p>
		<#+
	}

	Operation_v1_0.OperationType CurrOperation;
	
	void GenerateOperation(Operation_v1_0.OperationType operation)
	{
		#>
		<h1><#= operation.name #></h1>
		<#+
		GenerateOperationParameters(operation.Parameters);
		GenerateOperationExecution(operation.Execution);
		GenerateOperationReturnValue(operation.OperationReturnValues);
	}

	void GenerateOperationExecution(Operation_v1_0.ExecutionType execution)
	{
	}

	void GenerateOperationReturnValue(Operation_v1_0.OperationReturnValuesType operationReturnValues)
	{
	}

	string GetOperationTagName(string tagsuffix)
	{
		return "_" + CurrOperation.name + "_" + tagsuffix;
	}

	void GenerateTableHeaderRow(params string[] data)
	{
		string rowStr = "<tr>" + String.Join("", data.Select(item => "<th><div class=MsoNormal>" + item + "</div></th>").ToArray()) + "</tr>";
		#>
		<#= rowStr #>
		<#+
		}
	
	void GenerateTableRowFromData(string color, params string[] data)
	{
		#>
		<tr>
		<#+
		foreach(string item in data)
		{
			string rowStr = "<td><div class=MsoNormal style=\"color:" + color + "\">" + item + "</div></td>";
		#>
		<#= rowStr #>
		<#+
		}
		#>
		</tr>
		<#+
	}
	
	string GetStatusColor(Operation_v1_0.VariableTypeState state)
	{
		return GetStatusColor(state.ToString());
	}
	
	string GetStatusColor(string stateString)
	{
		switch(stateString)
		{
			case "underDesign":
				return "red";
			case "designApproved":
				return "blue";
			case "implemented":
				return "black";
			default:
				throw new NotSupportedException("StateString: " + stateString);
		}
	}
	
	void GenerateTableSectionWithContents(string sectionHeaderType, string sectionTitle, Action populateContents)
	{
		string sectionTagName = GetOperationTagName(sectionTitle);
		#>
<<#= sectionHeaderType #>><a name="<#= sectionTagName #>"><span lang=EN-US><#= sectionTitle #></span></a></<#= sectionHeaderType #>>
<p class=MsoNormal>
<table>
		<#+
		populateContents();		
		#>
</table>
</p>
		<#+
	}
	
	string GetTargetList(string separator, Operation_v1_0.TargetType[] targets)
	{
		if(targets == null)
			return "";
		return String.Join(separator, targets.Select(target => target.name).ToArray());
	}
	
	void GenerateOperationParameters(Operation_v1_0.ParametersType parameters)
	{
		GenerateTableSectionWithContents("h2", "Parameters", () => {
			GenerateTableHeaderRow("Name", "DataType", "Description");
			foreach(var parameter in parameters.Parameter)
				GenerateTableRowFromData(GetStatusColor(parameter.state), parameter.name, parameter.dataType, parameter.designDesc);
		});
		
		if(parameters.Items == null)
			return;
		GenerateTableSectionWithContents("h2", "Parameter Preparation", () => {
			GenerateTableHeaderRow("Name", "Affected Parameter(s)", "Description");
			foreach(object obj in parameters.Items)
			{
				Operation_v1_0.ValidationType validationItem = obj as Operation_v1_0.ValidationType;
				Operation_v1_0.ModificationType modificationItem = obj as Operation_v1_0.ModificationType;
				if(validationItem != null) {
					GenerateTableRowFromData(GetStatusColor(validationItem.state), 
						validationItem.name, GetTargetList(", ", validationItem.Target), validationItem.designDesc);
				} else if(modificationItem != null) {
					GenerateTableRowFromData(GetStatusColor(modificationItem.state), 
						modificationItem.name, GetTargetList(", ", modificationItem.Target), modificationItem.designDesc);
				} else 
					throw new NotSupportedException("Preparing item type: " + obj.GetType().Name);
			}
		});
	}

	void GenerateValidationItem(Operation_v1_0.ValidationType validationItem)
	{
		
	}
	
	void GenerateModificationItem(Operation_v1_0.ModificationType modificationItem)
	{
	}

	void GeneratePreparingItem(object preparingItem)
	{
		if(preparingItem == null)
			throw new ArgumentNullException("preparingItem");
		Operation_v1_0.ValidationType validationItem = preparingItem as Operation_v1_0.ValidationType;
		Operation_v1_0.ModificationType modificationItem = preparingItem as Operation_v1_0.ModificationType;
		if(validationItem != null)
			GenerateValidationItem(validationItem);
		else if(modificationItem != null)
			GenerateModificationItem(modificationItem);
		else 
			throw new NotSupportedException("Preparing item type: " + preparingItem.GetType().Name);
	}
	
	void GenerateOperationParameterValidationAndModification(object obj)
	{
	}

	/*
	void GenerateButton(PowerPointAddIn_v1_0.ButtonType button)
	{
		string iconString = button.officeGalleryIconSpecified ? button.officeGalleryIcon.ToString() : "";
		#>
<h3><a name="_button_<#= button.name #>"><span lang=EN-US>Button - <#= button.label  #> (<#= button.name #>)</span></a></h3>
<p class=MsoNormal><b>Executes:</b> <#= button.commandOnClick #></p>
<p class=MsoNormal><b>Office Icon:</b> <#= iconString #></p>
<p class=MsoNormal><b>Size:</b> <#= button.size.ToString() #></p>
<p class=MsoNormal><#= button.designDocumentation #></p>
		<#+
	}*/

	void GenerateBodyStart()
	{
		#>
<body lang=EN link=blue vlink=purple>

<div class=WordSection1>

		
		<#+
	}

	void GenerateBodyEnd()
	{
		#>
</div>

</body>
		
		<#+
		
	}
	
	void GenerateHeadWithStyle()
	{
		#>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:11.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:22.0pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:15.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoTocHeading, li.MsoTocHeading, div.MsoTocHeading
	{margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 2.0cm 70.85pt 2.0cm;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>
		<#+
	}
#>
<#+ 
	#region Class Level Variable Block
	
	//CQRS_v1_0.DomainType CurrentDomain;
	
	void GenerateReturnValueClassDefinition(object executionItem)
	{
		Operation_v1_0.OperationExecuteType operationExec = executionItem as Operation_v1_0.OperationExecuteType;
		Operation_v1_0.MethodExecuteType methodExec = executionItem as Operation_v1_0.MethodExecuteType;
		Operation_v1_0.TargetDefinitionType targetDef = executionItem as Operation_v1_0.TargetDefinitionType;
		if(operationExec != null) {
		}
		else if(methodExec != null)
		{
			//GenerateReturnValueClassDefinition(methodExec.name, methodExec.ReturnValue, false);
		}
		else if(targetDef != null) {
		} else
			throw new NotSupportedException("Execution item type: " + executionItem.GetType().Name);
	}
	
	
	void GenerateExecutionItem(object executionItem)
	{
		Operation_v1_0.OperationExecuteType operationExec = executionItem as Operation_v1_0.OperationExecuteType;
		Operation_v1_0.MethodExecuteType methodExec = executionItem as Operation_v1_0.MethodExecuteType;
		Operation_v1_0.TargetDefinitionType targetDef = executionItem as Operation_v1_0.TargetDefinitionType;
		if(operationExec != null) {
			//GenerateOperationExecuteItem(operationExec);
		} else if(methodExec != null) {
			//GenerateMethodExecuteItem(methodExec);
		} else if(targetDef != null) {
			//GenerateTargetDefinitionItem(targetDef);
		} else
			throw new NotSupportedException("Execution item type: " + executionItem.GetType().Name);
	}
	
	void GenerateVariableDefinition(Operation_v1_0.VariableType variableDef, string accessModifier, string initialAssignment)
	{
		GenerateVariableDefinition(variableDef.dataType, variableDef.name, accessModifier, initialAssignment);
	}
	
	void GenerateVariableDefinition(string dataType, string name, string accessModifier, string initialAssignment)
	{
		if(dataType == null)
			throw new ArgumentNullException("dataType");
		if(name == null)
			throw new ArgumentNullException("name");
		string accessString = accessModifier ?? "";
		string initialAssignmentString = initialAssignment != null ? " = " + initialAssignment : "";
		#>
		<#= accessString #> <#= dataType #> <#= name #> <#= initialAssignmentString #>;
		<#+
	}
	
	#endregion
#>